<?xml version="1.0" encoding="utf-8"?>
<!-- scan: <br> 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 <br> scanPeriod: 
	<br> 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。<br> 当scan为true时，此属性生效。默认的时间间隔为1分钟。 
	<br> debug: <br> 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

	<!-- 控制台输出日志 -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<layout class="ch.qos.logback.classic.PatternLayout">
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
		</layout>
	</appender>
	<!-- 完成了之后打印成功 -->
	<appender name="finish" class="ch.qos.logback.core.ConsoleAppender">
		<layout class="ch.qos.logback.classic.PatternLayout">
			<pattern>%d{yyyy-MM-dd HH:mm:ss} -- %msg%n</pattern>
		</layout>
	</appender>
	<!-- 异步输出 -->
	<appender name="async_queue" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>1000</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="console" />
	</appender>

	<!-- TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF -->

	<!-- 我们自己的包 -->
	<logger name="com.ustcinfo.ishare.eip" level="INFO" />
	<!-- 启动成功的小狗 -->
	<logger name="com.ustcinfo.ishare.eip.eip.basic.common.utils.Finish"
		level="INFO" additivity="false">
		<appender-ref ref="finish" />
	</logger>
	<!-- mongodb 的包 -->
	<logger name="org.mongodb.driver" level="ERROR" />
	<!-- apache camel 的包 -->
	<logger name="org.apache.camel" level="ERROR" />
	<!-- zkClient 的包 -->
	<logger name="org.I0Itec.zkclient" level="ERROR" />
	<!-- zookeeper 的包 -->
	<logger name="org.apache.zookeeper" level="ERROR" />
	<!-- spring 的包 -->
	<logger name="org.springframework" level="INFO" />
	<!-- LOGBACK 的包 -->
	<logger name="ch.qos.logback" level="ERROR" />

	<!-- TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF -->
	<root level="ERROR">
		<appender-ref ref="async_queue" />
	</root>
</configuration>
